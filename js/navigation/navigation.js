/**
 * M√≥dulo: navigation.js
 * Descri√ß√£o: Este m√≥dulo gerencia o fluxo de navega√ß√£o, incluindo valida√ß√£o de destino, obten√ß√£o de rotas, monitoramento cont√≠nuo da posi√ß√£o do usu√°rio e atualiza√ß√£o da interface.
 *
 * Depend√™ncias:
 * 1. **Fun√ß√µes Externas**:
 *    - `validateDestination(destination)`: Valida se o destino selecionado √© v√°lido.
 *    - `getCurrentLocation()`: Obt√©m a localiza√ß√£o atual do usu√°rio.
 *    - `fetchMultipleRouteOptions(startLat, startLon, destLat, destLon)`: Obt√©m m√∫ltiplas op√ß√µes de rota.
 *    - `promptUserToChooseRoute(routeOptions)`: Permite que o usu√°rio escolha uma rota.
 *    - `enrichInstructionsWithOSM(instructions, lang)`: Enriquece as instru√ß√µes de rota com dados adicionais.
 *    - `plotRouteOnMap(startLat, startLon, destLat, destLon)`: Plota a rota no mapa.
 *    - `finalizeRouteMarkers(startLat, startLon, destination)`: Adiciona marcadores de origem e destino no mapa.
 *    - `updateInstructionBanner(instruction, lang)`: Atualiza o banner de instru√ß√µes.
 *    - `updateRouteFooter(routeData, lang)`: Atualiza o rodap√© com informa√ß√µes da rota.
 *    - `updateRealTimeNavigation(lat, lon, instructions, destLat, destLon, lang, heading)`: Atualiza a navega√ß√£o em tempo real.
 *    - `adjustMapZoomBasedOnSpeed(speed)`: Ajusta o zoom do mapa com base na velocidade do usu√°rio.
 *    - `setMapRotation(heading)`: Rotaciona o mapa com base no heading do usu√°rio.
 *    - `showNotification(message, type)`: Exibe notifica√ß√µes para o usu√°rio.
 *    - `hideRouteLoadingIndicator()`: Oculta o indicador de carregamento da rota.
 *    - `showRouteLoadingIndicator()`: Exibe o indicador de carregamento da rota.
 *
 * 2. **Vari√°veis Globais**:
 *    - `selectedDestination`: Objeto contendo as coordenadas do destino selecionado.
 *    - `userLocation`: Objeto contendo a localiza√ß√£o atual do usu√°rio.
 *    - `navigationState`: Objeto que armazena o estado atual da navega√ß√£o.
 *    - `window.positionWatcher`: ID retornado pelo `navigator.geolocation.watchPosition`.
 *
 * 3. **Constantes**:
 *    - `selectedLanguage`: Idioma selecionado pelo usu√°rio (ex.: "pt", "en").
 *
 * Observa√ß√£o:
 * Certifique-se de que todas as depend√™ncias est√£o dispon√≠veis no escopo global ou importadas corretamente.
 */

/////////////////////////////
// 1. FLUXO PRINCIPAL
/////////////////////////////

/**
 * 1.1. startNavigation
 * Inicia a navega√ß√£o para o destino selecionado, configurando o fluxo completo:
 *  - Valida√ß√£o do destino e disponibilidade de localiza√ß√£o;
 *  - Obten√ß√£o de m√∫ltiplas op√ß√µes de rota e escolha pelo usu√°rio;
 *  - Enriquecimento das instru√ß√µes de rota (por exemplo, com dados do OSM);
 *  - Anima√ß√£o e plotagem da rota no mapa;
 *  - Configura√ß√£o do monitoramento cont√≠nuo da posi√ß√£o do usu√°rio.
 */
export async function startNavigation() {
  try {
    console.log('[startNavigation] Iniciando navega√ß√£o...');

    // 1Ô∏è‚É£ Exibe o indicador de carregamento da rota.
    showRouteLoadingIndicator();

    // 2Ô∏è‚É£ Valida o destino selecionado.
    if (!validateDestination(selectedDestination)) {
      console.error('Destino inv√°lido. Selecione um destino v√°lido.');
      hideRouteLoadingIndicator();
      return;
    }

    // 3Ô∏è‚É£ Verifica se a localiza√ß√£o do usu√°rio est√° dispon√≠vel.
    if (!userLocation) {
      showNotification(
        'Localiza√ß√£o n√£o dispon√≠vel. Permita o acesso √† localiza√ß√£o primeiro.',
        'error'
      );
      hideRouteLoadingIndicator();
      return;
    }

    // 4Ô∏è‚É£ Inicializa o estado da navega√ß√£o.
    initNavigationState();

    // 5Ô∏è‚É£ Obt√©m m√∫ltiplas op√ß√µes de rota.
    const routeOptions = await fetchMultipleRouteOptions(
      userLocation.latitude,
      userLocation.longitude,
      selectedDestination.lat,
      selectedDestination.lon
    );
    if (!routeOptions || routeOptions.length === 0) {
      showNotification('Nenhuma rota dispon√≠vel.', 'error');
      hideRouteLoadingIndicator();
      return;
    }

    // 6Ô∏è‚É£ Permite que o usu√°rio escolha a rota desejada.
    const selectedRoute = await promptUserToChooseRoute(routeOptions);
    if (!selectedRoute) {
      hideRouteLoadingIndicator();
      return;
    }

    // 7Ô∏è‚É£ Enriquece as instru√ß√µes da rota com dados adicionais.
    const routeInstructions = await enrichInstructionsWithOSM(
      selectedRoute.routeData,
      selectedLanguage
    );
    navigationState.instructions = routeInstructions;

    // 8Ô∏è‚É£ Centraliza o mapa na localiza√ß√£o atual do usu√°rio.
    animateMapToLocalizationUser(userLocation.latitude, userLocation.longitude);

    // 9Ô∏è‚É£ Plota a rota escolhida no mapa e adiciona os marcadores.
    const routeData = await plotRouteOnMap(
      userLocation.latitude,
      userLocation.longitude,
      selectedDestination.lat,
      selectedDestination.lon
    );
    finalizeRouteMarkers(
      userLocation.latitude,
      userLocation.longitude,
      selectedDestination
    );

    // üîü Atualiza a interface com as informa√ß√µes da rota.
    hideRouteSummary();
    updateInstructionBanner(routeInstructions[0], selectedLanguage);
    updateRouteFooter(routeData, selectedLanguage);
    hideRouteLoadingIndicator();

    // üîü.1 Fornece feedback por voz para indicar que a navega√ß√£o come√ßou.
    giveVoiceFeedback('Navega√ß√£o iniciada.');

    // üîü.2 Inicia o monitoramento cont√≠nuo da posi√ß√£o do usu√°rio.
    startPositionWatcher();

    // Adicionar evento para notificar o assistente
    const event = new CustomEvent('navigationStarted', {
      detail: { destination: selectedDestination },
    });
    window.dispatchEvent(event);

    console.log('[startNavigation] Navega√ß√£o iniciada com sucesso.');
  } catch (error) {
    console.error('[startNavigation] Erro:', error);
    showNotification('Erro ao iniciar navega√ß√£o.', 'error');
    hideRouteLoadingIndicator();
  }
}

/////////////////////////////
// 2. FUN√á√ïES AUXILIARES
/////////////////////////////

/**
 * 2.1. initNavigationState
 * Inicializa o estado da navega√ß√£o.
 */
function initNavigationState() {
  navigationState.isActive = true;
  navigationState.isPaused = false;
  navigationState.currentStepIndex = 0;
  navigationState.instructions = [];
  console.log('[initNavigationState] Estado de navega√ß√£o inicializado.');
}

/**
 * 2.2. startPositionWatcher
 * Inicia o monitoramento cont√≠nuo da posi√ß√£o do usu√°rio.
 */
function startPositionWatcher() {
  window.positionWatcher = navigator.geolocation.watchPosition(
    (pos) => {
      if (navigationState.isPaused) return;

      const { latitude, longitude, heading, speed } = pos.coords;
      userLocation = {
        latitude,
        longitude,
        accuracy: pos.coords.accuracy,
        heading,
      };

      updateUserMarker(latitude, longitude, heading);
      adjustMapZoomBasedOnSpeed(speed);
      if (heading !== null) setMapRotation(heading);

      updateRealTimeNavigation(
        latitude,
        longitude,
        navigationState.instructions,
        selectedDestination.lat,
        selectedDestination.lon,
        selectedLanguage,
        heading
      );

      if (
        shouldRecalculateRoute(
          latitude,
          longitude,
          navigationState.instructions
        )
      ) {
        notifyDeviation();
      }
    },
    (error) => {
      console.error('[startPositionWatcher] Erro:', error);
      showNotification('Erro ao monitorar posi√ß√£o.', 'error');
    },
    { enableHighAccuracy: true }
  );
}

/**
 * 2.3. notifyDeviation
 * Notifica o usu√°rio sobre um desvio do trajeto e dispara o rec√°lculo da rota.
 */
function notifyDeviation() {
  showNotification('Voc√™ se desviou da rota. Recalculando...', 'warning');
  recalculateRoute(
    userLocation.latitude,
    userLocation.longitude,
    selectedDestination.lat,
    selectedDestination.lon
  );
}

/////////////////////////////
// 3. FUN√á√ïES COMPLEMENTARES
/////////////////////////////

/**
 * 3.1. stopNavigation
 * Finaliza a navega√ß√£o, limpando estados e parando o monitoramento.
 */
export function endNavigation() {
  if (window.positionWatcher) {
    navigator.geolocation.clearWatch(window.positionWatcher);
    window.positionWatcher = null;
  }
  navigationState.isActive = false;
  navigationState.isPaused = false;
  console.log('[stopNavigation] Navega√ß√£o finalizada.');

  // Adicionar evento para notificar o assistente
  const event = new CustomEvent('navigationEnded');
  window.dispatchEvent(event);
}

/**
 * 3.2. pauseNavigation
 * Pausa a navega√ß√£o.
 */
export function pauseNavigation() {
  if (!navigationState.isActive) {
    console.warn('[pauseNavigation] Navega√ß√£o n√£o est√° ativa.');
    return;
  }
  navigationState.isPaused = true;
  console.log('[pauseNavigation] Navega√ß√£o pausada.');
}

/**
 * 3.3. resumeNavigation
 * Retoma a navega√ß√£o pausada.
 */
export function resumeNavigation() {
  if (!navigationState.isPaused) {
    console.warn('[resumeNavigation] Navega√ß√£o n√£o est√° pausada.');
    return;
  }
  navigationState.isPaused = false;
  console.log('[resumeNavigation] Navega√ß√£o retomada.');
}
