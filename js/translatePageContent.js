// üìÅ translatePageContent.js ‚Äì Tradu√ß√£o din√¢mica da interface

let currentLang = "pt";
let translations = {};

/**
 * Carrega o arquivo de tradu√ß√£o com base no idioma e aplica √† p√°gina.
 * @param {string} lang - C√≥digo do idioma (ex: 'pt', 'en', 'es', 'he').
 */
export async function translatePageContent(lang = "pt") {
  currentLang = lang;

  try {
    // Carrega o arquivo de tradu√ß√£o correspondente
    const response = await fetch(`./i18n/${lang}.json`);
    if (!response.ok) throw new Error("Falha ao carregar tradu√ß√µes.");

    translations = await response.json();

    applyTranslations();
  } catch (err) {
    console.warn(
      `Tradu√ß√£o n√£o dispon√≠vel para "${lang}". Usando portugu√™s como padr√£o.`
    );
    if (lang !== "pt") translatePageContent("pt");
  }
}

/**
 * Aplica as tradu√ß√µes na p√°gina com base no atributo [data-i18n]
 */
function applyTranslations() {
  const elements = document.querySelectorAll("[data-i18n]");
  elements.forEach((el) => {
    const key = el.getAttribute("data-i18n");
    const translation = translations[key];
    if (translation) {
      el.textContent = translation;
    }
  });
}

/**
 * Fun√ß√£o utilit√°ria opcional para obter tradu√ß√µes diretamente via c√≥digo
 * @param {string} key
 * @returns {string}
 */
export function t(key) {
  return translations[key] || key;
}
